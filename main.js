!function(){"use strict";const e={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__save-button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},t=".profile__image",s=document.querySelector("#add-card-form"),r=document.querySelector("#edit-profile-form"),i=r.querySelector(".modal__input_type_name"),o=r.querySelector(".modal__input_type_descripion"),n=document.querySelector("#change-image-form"),a=document.querySelector(".profile__edit-button"),l=document.querySelector(".profile__add-button"),d=document.querySelector(".profile__image-button");class h{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this)}_handleEscClose(e){"Escape"===e.key&&this.close()}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}setEventListeners(){this._popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("modal_opened")||e.target.classList.contains("modal__exit-button"))&&this.close()}))}}var c=class{constructor(e){let{userName:t,userJob:s,profileImage:r}=e;this._profileName=document.querySelector(t),this._profileJob=document.querySelector(s),this._profileImage=document.querySelector(r)}getUserInfo(){return{name:this._profileName.textContent,job:this._profileJob.textContent}}setProfileInfo(e){let{profileName:t,profileJob:s}=e;this._profileName.textContent=t,this._profileJob.textContent=s}setProfileImage(e){let{avatar:t}=e;this._profileImage.src=t,this._profileImage.alt="Profile-image-here"}};class u extends h{constructor(e){let{popupSelector:t,handleFormSubmit:s}=e;super(t),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=s,this._submitButton=this._popupElement.querySelector(".modal__save-button"),this._submitButtonText=this._submitButton.textContent,this._inputList=this._popupForm.querySelectorAll(".modal__input")}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}close(){super.close(),this._popupForm.reset()}renderSaving(e){this._submitButton.textContent=e?"Saving...":this._submitButtonText}}var _=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputElements=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputElements.forEach((e=>{e.addEventListener("input",(t=>{this.checkInputValidity(e),this.toggleButtonState()}))}))}checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_showInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this._errorMessageEl.textContent=e.validationMessage,this._errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this._errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this._errorMessageEl.textContent="",this._errorMessageEl.classList.remove(this._errorClass)}toggleButtonState(){this._hasInvalidInput()?this._disableButton():this._enableButton()}resetValidation(){this.toggleButtonState(),this._inputElements.forEach((e=>{this._hideInputError(e)}))}_hasInvalidInput(){return!this._inputElements.every((e=>e.validity.valid))}_disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}};const m=new class{constructor(e){let{baseUrl:t,authToken:s}=e;var r,i,o;r=this,o=e=>e.ok?e.json():Promise.reject(`Error: ${e.status}`),(i=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(i="_processServerResponse"))in r?Object.defineProperty(r,i,{value:o,enumerable:!0,configurable:!0,writable:!0}):r[i]=o,this._baseUrl=t,this._authToken=s,this._headers={authorization:this._authToken,"Content-Type":"application/json"}}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{method:"GET",headers:this._headers}).then(this._processServerResponse)}loadUserInfo(){return fetch(`${this._baseUrl}/users/me`,{method:"GET",headers:this._headers}).then(this._processServerResponse)}editUserInfo(e){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.title,about:e.description})}).then(this._processServerResponse)}addCard(e){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.link})}).then(this._processServerResponse)}removeCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._processServerResponse)}removeCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"DELETE",headers:this._headers}).then(this._processServerResponse)}addCardLike(e){return fetch(`${this._baseUrl}/cards/likes/${e}`,{method:"PUT",headers:this._headers}).then(this._processServerResponse)}updateProfilePic(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.link})}).then(this._processServerResponse)}}({baseUrl:"https://around.nomoreparties.co/v1/group-12",authToken:"eb433773-4d2e-4e42-9076-4dd771b1e5ef"});let p,g;const v=new c({userName:".profile__title",userJob:".profile__description",profileImage:t});Promise.all([m.loadUserInfo(),m.getInitialCards()]).then((e=>{let[t,s]=e;v.setProfileInfo({profileName:t.name,profileJob:t.about}),v.setProfileImage(t),g=t._id,p=new class{constructor(e,t){let{items:s,renderer:r}=e;this._renderedItems=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._renderedItems.forEach(this._renderer)}addItem(e){this._container.append(e)}prependItem(e){this._container.prepend(e)}}({items:s,renderer:e=>{const t=S(e);p.addItem(t)}},".cards__list"),p.renderItems()})).catch((e=>console.log(e)));const b=new class extends h{constructor(e){super(e),this._modalImage=this._popupElement.querySelector(".modal__image"),this._modalText=this._popupElement.querySelector(".modal__caption")}open(e){this._modalImage.src=e.link,this._modalImage.alt=`Image ${e.link}`,this._modalText.textContent=e.name,super.open()}}("#image-modal"),f=new class extends h{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._deleteSubmitButton=this._popupElement.querySelector(".modal__delete-card-button"),this._deleteSubmitButtonText=this._deleteSubmitButton.textContent}setSubmit(e){this._handleSubmitCallback=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleSubmitCallback()}))}renderSavingText(e){this._deleteSubmitButton.textContent=e?"Deleting...":this._deleteSubmitButtonText}}("#delete-modal"),S=e=>{const t=new class{constructor(e,t,s){let{data:r,toggleImageClick:i,toggleCardDelete:o,toggleCardLike:n}=e;var a,l,d;a=this,d=()=>{this._cardElement.remove(),this._cardElement=null},(l=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var s=e[Symbol.toPrimitive];if(void 0!==s){var r=s.call(e,"string");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(l="deleteCard"))in a?Object.defineProperty(a,l,{value:d,enumerable:!0,configurable:!0,writable:!0}):a[l]=d,this._name=r.name,this._link=r.link,this._id=r._id,this._likes=r.likes,this._userId=s,this._ownerId=r.owner._id,this._toggleImageClick=i,this._toggleCardDelete=o,this._toggleCardLike=n,this._cardSelector=t}getId(){return this._id}_getTemplate(){return document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0)}getView(){return this._cardElement=this._getTemplate(),this._setEventListeners(),this._imageEl.src=this._link,this._imageEl.alt=this._name,this._cardElement.querySelector(".card__title").textContent=this._name,this._cardTally=this._cardElement.querySelector(".card__like-tally"),this._renderLikes(),this._ownerId!==this._userId&&this._cardDeleteBtn.remove(),this._cardElement}isLiked(){return this._likes.some((e=>this._userId===e._id))}updateLikes(e){this._likes=e,this._renderLikes()}_renderLikes(){this.isLiked()?this._cardLikeBtn.classList.add("card__like-button_active"):this._cardLikeBtn.classList.remove("card__like-button_active"),this._cardTally.textContent=this._likes.length}_setEventListeners(){this._cardLikeBtn=this._cardElement.querySelector(".card__like-button"),this._cardLikeBtn.addEventListener("click",(()=>this._toggleCardLike())),this._cardDeleteBtn=this._cardElement.querySelector(".card__delete-button"),this._cardDeleteBtn.addEventListener("click",(()=>this._toggleCardDelete())),this._imageEl=this._cardElement.querySelector(".card__image"),this._imageEl.addEventListener("click",(()=>this._toggleImageClick({name:this._name,link:this._link})))}}({data:e,toggleImageClick:e=>{b.open(e)},toggleCardDelete:()=>{const e=t.getId();f.open(),f.setSubmit((()=>{f.renderSavingText(!0),m.removeCard(e).then((()=>{t.deleteCard(),f.close()})).catch((e=>console.log(e))).finally((()=>{f.renderSavingText(!1)}))}))},toggleCardLike:()=>{const e=t.getId();t.isLiked()?m.removeCardLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(e))):m.addCardLike(e).then((e=>{t.updateLikes(e.likes)})).catch((e=>console.log(e)))}},"#card-template",g);return t.getView()},E=new u({popupSelector:"#edit-modal",handleFormSubmit:e=>{E.renderSaving(!0),m.editUserInfo(e).then((()=>{v.setProfileInfo({profileName:e.title,profileJob:e.description}),E.close()})).catch((e=>console.log(e))).finally((()=>{E.renderSaving(!1)}))}}),y=new c({profileImage:t}),k=new u({popupSelector:"#profile-modal",handleFormSubmit:e=>{k.renderSaving(!0),m.updateProfilePic(e).then((()=>{y.setProfileImage({avatar:e.link}),k.close()})).catch((e=>console.log(e))).finally((()=>{k.renderSaving(!1)}))}}),L=new u({popupSelector:"#add-modal",handleFormSubmit:e=>{L.renderSaving(!0),m.addCard(e).then((e=>{!function(e){const t=S(e);p.prependItem(t)}(e),L.close()})).catch((e=>console.log(e))).finally((()=>{L.renderSaving(!1)}))}}),C=new _(e,r),I=new _(e,s),B=new _(e,n);b.setEventListeners(),f.setEventListeners(),E.setEventListeners(),L.setEventListeners(),k.setEventListeners(),C.enableValidation(),I.enableValidation(),B.enableValidation(),a.addEventListener("click",(()=>{!function(){const{name:e,job:t}=v.getUserInfo();i.value=e,o.value=t}(),E.open(),C.resetValidation()})),l.addEventListener("click",(()=>{L.open(),I.resetValidation()})),d.addEventListener("click",(()=>{k.open(),B.resetValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,